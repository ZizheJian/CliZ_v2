for dimension_num in [1,2,3,4]:
	file=open(f"change_err_bound_{dimension_num}D.cpp","w")
	file.write(f"#ifndef __CHANGE_ERR_BOUND_{dimension_num}D_CPP__\n")
	file.write(f"#define __CHANGE_ERR_BOUND_{dimension_num}D_CPP__\n")
	file.write("\n")
	file.write("#include \"change_err_bound.hpp2\"\n")
	file.write("\n")
	file.write("namespace cliz\n")
	file.write("{\n")
	file.write("	template<typename T>\n")
	file.write(f"	void task_c<T>::change_err_bound_{dimension_num}D()\n")
	file.write("	{\n")
	file.write("		char *decisive_file_path=NULL;\n")
	file.write("		#if defined(JOB_TYPE_COMPRESS) || defined(JOB_TYPE_DECOMPRESS)\n")
	file.write("			decisive_file_path=in_file_path;\n")
	file.write("		#endif\n")
	file.write("		#ifdef JOB_TYPE_VALIDATE\n")
	file.write("			decisive_file_path=src_file_path;\n")
	file.write("		#endif\n")
	file.write("		if ((cfg_file_mode==NULL) || (strcmp(cfg_file_mode,\"set\")==0))\n")
	file.write("		{\n")
	file.write("			if (strcmp(err_type,\"ABS\")==0)\n")
	file.write("				err_bound=raw_err_bound;\n")
	file.write("			if (strcmp(err_type,\"REL\")==0)\n")
	file.write("			{\n")
	file.write("				new_data(data,data_num);\n")
	file.write("				FILE *decisive_file=fopen(decisive_file_path,\"rb\");\n")
	file.write("				fread(data,sizeof(T),data_num,decisive_file);\n")
	file.write("				fclose(decisive_file);\n")
	file.write("				T data_mn=numeric_limits<T>::max();\n")
	file.write("				T data_mx=numeric_limits<T>::min();\n")
	file.write("				long long *mx=it2->mx;\n")
	file.write("				long long *weight=it2->weight;\n")
	for i in range(dimension_num):
		file.write("	"*(i+4)+f"for (long long i{i}=0;i{i}<mx[{i}];i{i}++)\n")
	tabs="	"*(dimension_num+3)
	file.write(tabs+"{\n")
	file.write(tabs+"	long long pos=")
	for i in range(dimension_num-1):
		file.write(f"i{i}*weight[{i}]+")
	file.write(f"i{dimension_num-1};\n")
	file.write(tabs+"	if (data[pos]<data_mn)\n")
	file.write(tabs+"		data_mn=data[pos];\n")
	file.write(tabs+"	if (data[pos]>data_mx)\n")
	file.write(tabs+"		data_mx=data[pos];\n")
	file.write(tabs+"}\n")
	file.write("				err_bound=(data_mx-data_mn)*raw_err_bound;\n")
	file.write("				delete_data(data);\n")
	file.write("			}\n")
	file.write("		}\n")
	file.write("		else\n")
	file.write("		{\n")
	file.write("			if (err_type==NULL)\n")
	file.write("			{\n")
	file.write("				new_data(err_type,4);\n")
	file.write("				strcpy(err_type,\"ABS\");\n")
	file.write("			}\n")
	file.write("			else\n")
	file.write("			{\n")
	file.write("				if ((strcmp(err_type,\"ABS\")==0) && (err_bound!=raw_err_bound))\n")
	file.write("				{\n")
	file.write("					printf(\"Error: Error bound mismatch.\\n\");\n")
	file.write("					exit(0);\n")
	file.write("				}\n")
	file.write("				if (strcmp(err_type,\"REL\")==0)\n")
	file.write("				{\n")
	file.write("					new_data(data,data_num);\n")
	file.write("					FILE *decisive_file=fopen(decisive_file_path,\"rb\");\n")
	file.write("					fread(data,sizeof(T),data_num,decisive_file);\n")
	file.write("					fclose(decisive_file);\n")
	file.write("					T data_mn=numeric_limits<T>::max();\n")
	file.write("					T data_mx=numeric_limits<T>::min();\n")
	file.write("					long long *mx=it2->mx;\n")
	file.write("					long long *weight=it2->weight;\n")
	for i in range(dimension_num):
		file.write("	"*(i+5)+f"for (long long i{i}=0;i{i}<mx[{i}];i{i}++)\n")
	tabs="	"*(dimension_num+4)
	file.write(tabs+"{\n")
	file.write(tabs+"	long long pos=")
	for i in range(dimension_num-1):
		file.write(f"i{i}*weight[{i}]+")
	file.write(f"i{dimension_num-1};\n")
	file.write(tabs+"	if (data[pos]<data_mn)\n")
	file.write(tabs+"		data_mn=data[pos];\n")
	file.write(tabs+"	if (data[pos]>data_mx)\n")
	file.write(tabs+"		data_mx=data[pos];\n")
	file.write(tabs+"}\n")
	file.write("					if (err_bound!=(data_mx-data_mn)*raw_err_bound)\n")
	file.write("					{\n")
	file.write("						printf(\"Error: Error bound mismatch.\\n\");\n")
	file.write("						exit(0);\n")
	file.write("					}\n")
	file.write("					delete_data(data);\n")
	file.write("				}\n")
	file.write("			}\n")
	file.write("		}\n")
	file.write("		err_bound_reciprocal=1/err_bound;\n")
	file.write("	}\n")
	file.write("}\n")
	file.write("\n")
	file.write("#endif")
	file.close()